from aiogram import F, Router, Bot
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from database.user import check_active_subscription, check_has_energy
from bot.keyboards.comp_keyboards import q1_markup, q2_markup, q3_markup, comp_prompt, continue_markup, comp_pair_btn
from bot.keyboards.main_keyboards import energy_button

from openai import AsyncOpenAI
from config import GPT_TOKEN

router = Router()
client = AsyncOpenAI(api_key=GPT_TOKEN)

class CheckComp(StatesGroup):
    ask_names_dates = State()
    quest1 = State()
    quest2 = State()
    quest3 = State()
    

@router.message((F.text == "üíû–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—åüíû") | (F.text == "üíå –ï—â–µ –æ–¥–Ω–∞ –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏"))
async def send_quest(msg: Message, state: FSMContext, session: AsyncSession, bot: Bot) -> None:
    await state.clear()
    if (await check_active_subscription(session, msg.from_user.id)) or (await check_has_energy(session, msg.from_user.id)):
        await msg.answer(text="""–ù–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É?
                         
üíû –ù–∞–ø–∏—à–∏ –º–Ω–µ –∏–º–µ–Ω–∞ –∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π –ø–∞—Ä—ã ‚Äî —è –ø—Ä–æ–≤–µ—Ä—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ –°—É–¥—å–±—ã.

‚ùóÔ∏è –í—Å—ë –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤ —Ç–∞–∫–æ–º  —Ñ–æ—Ä–º–∞—Ç–µ:
–ê–Ω–Ω–∞ 14.02.2001
–î–º–∏—Ç—Ä–∏–π 24.07.2001""")
        
        await state.set_state(CheckComp.ask_names_dates)
        
    else:
        await msg.answer(text="""‚ù§Ô∏è‚Äçüî• –¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∞ –º–∞–∫—Å–∏–º—É–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ üíî
                         
–ù–æ —Ç—ã –º–æ–∂–µ—à—å
                         
üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø - –∏ –∑–∞–¥–∞–≤–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏  –¥–µ–ª–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ""",
                     reply_markup=energy_button)
        
        
@router.message(F.text == "üíò –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
async def send_quest(msg: Message, state: FSMContext, session: AsyncSession) -> None:
    if (await check_active_subscription(session, msg.from_user.id)) or (await check_has_energy(session, msg.from_user.id)):
        data = await state.get_data()
        
        if 'pair_info' in data:
            pair_info = data['pair_info']
            await msg.answer(text=f"–ì–æ—Ç–æ–≤–∏–º –æ—Ç–≤–µ—Ç –ø–æ —ç—Ç–æ–π –ø–∞—Ä–µ?\n\n{pair_info}",
                             reply_markup=comp_pair_btn)        
    else:
        await msg.answer(text="""‚ù§Ô∏è‚Äçüî• –¢—ã —É–∂–µ —Å–¥–µ–ª–∞–ª–∞ –º–∞–∫—Å–∏–º—É–º –±–µ—Å–ø–ª–∞—Ç–Ω—ã—Ö —Ä–∞–∑–±–æ—Ä–æ–≤ –∏ –ø—Ä–æ–≤–µ—Ä–æ–∫ üíî
                         
–ù–æ —Ç—ã –º–æ–∂–µ—à—å
                         
üîÆ –û—Ç–∫—Ä—ã—Ç—å –ø–æ–ª–Ω—ã–π –¥–æ—Å—Ç—É–ø - –∏ –∑–∞–¥–∞–≤–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤ –∏  –¥–µ–ª–∞—Ç—å —Å—Ç–æ–ª—å–∫–æ –ø—Ä–æ–≤–µ—Ä–æ–∫ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, —Å–∫–æ–ª—å–∫–æ –Ω—É–∂–Ω–æ""",
                     reply_markup=energy_button)
        
        
@router.callback_query(F.data == "comp_yes")
async def ask_quest(callback: CallbackQuery, state: FSMContext):
    await callback.answer()
    await callback.message.answer(text="1/3 –ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?",
                     reply_markup=q1_markup)
    await state.set_state(CheckComp.quest1)
    
    
@router.callback_query(F.data == "comp_no")
async def send_quest(callback: CallbackQuery, state: FSMContext) -> None:
    await callback.answer()
    await state.clear()
    await callback.message.answer(text="""üíû –ù–∞–ø–∏—à–∏ –º–Ω–µ –∏–º–µ–Ω–∞ –∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è –≤–∞—à–µ–π –ø–∞—Ä—ã ‚Äî —è –ø—Ä–æ–≤–µ—Ä—é —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ –°—É–¥—å–±—ã.

‚ùóÔ∏è –í—Å—ë –≤ –æ–¥–Ω–æ–º —Å–æ–æ–±—â–µ–Ω–∏–∏, –≤ —Ç–∞–∫–æ–º  —Ñ–æ—Ä–º–∞—Ç–µ:
–ê–Ω–Ω–∞ 14.02.2001
–î–º–∏—Ç—Ä–∏–π 24.07.2001""")
        
    await state.set_state(CheckComp.ask_names_dates)
                

@router.message(CheckComp.ask_names_dates)
async def ask_quest(msg: Message, state: FSMContext):
    pair_info = msg.text
    await state.update_data(pair_info = pair_info)
    await state.set_state(None)
    await msg.answer(text="1/3 –ù–∞ –∫–∞–∫–æ–º —ç—Ç–∞–ø–µ –≤–∞—à–∏ –æ—Ç–Ω–æ—à–µ–Ω–∏—è?",
                     reply_markup=q1_markup)
    await state.set_state(CheckComp.quest1)
    
    
@router.message(CheckComp.quest1)
async def ask_quest(msg: Message, state: FSMContext):
    ans1 = msg.text
    await state.update_data(ans1 = ans1)
    await state.set_state(None)
    await msg.answer(text="2/3 –ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                     reply_markup=q2_markup)
    await state.set_state(CheckComp.quest2)
    

@router.message(CheckComp.quest2)
async def ask_quest(msg: Message, state: FSMContext):
    ans2 = msg.text
    await state.update_data(ans2 = ans2)
    await state.set_state(None)
    await msg.answer(text="3/3 –ß—Ç–æ —Ç—ã —Ö–æ—á–µ—à—å –æ—Ç —ç—Ç–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π?",
                     reply_markup=q3_markup)
    await state.set_state(CheckComp.quest3)
    
    
@router.message(CheckComp.quest3)
async def ask_quest(msg: Message, state: FSMContext, bot: Bot):
    ans3 = msg.text
    data = await state.get_data()
    ans1 = data.get('ans1')
    ans2 = data.get('ans2')
    pair_info = data.get('pair_info')
    
    try:   
        await state.set_state(None)
        await msg.answer(text="üîÆ –î–µ–ª–∞—é –∑–∞–ø—Ä–æ—Å –≤–æ –í—Å–µ–ª–µ–Ω–Ω—É—é...")
        response = await client.chat.completions.create(
            model="gpt-4.1-2025-04-14",
            messages=[
                {"role": "system", "content": comp_prompt},
                {"role": "user",   "content": (
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ: {pair_info}\n"
                    f"–û—Ç–≤–µ—Ç1: {ans1}\n"
                    f"–û—Ç–≤–µ—Ç2: {ans2}\n"
                    f"–û—Ç–≤–µ—Ç3: {ans3}"
                )}
            ],
            temperature=0.7,
            max_tokens=1000,
        )
        
        await msg.answer(response.choices[0].message.content.strip())
        await msg.answer(text="–í—ã–±–µ—Ä–∏, —á—Ç–æ —Ö–æ—á–µ—à—å —Å–¥–µ–ª–∞—Ç—å –¥–∞–ª—å—à–µ",
                         reply_markup=continue_markup)
        await state.set_state(None)
    
    except Exception as e:
        print(e)
        await msg.answer("–ö–∞–∂–µ—Ç—Å—è, –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ—Å–º–æ—Å–æ–º, –ø–æ–¥–æ–∂–¥–µ–º, –∫–æ–≥–¥–∞ –ø—Ä–æ–π–¥–µ—Ç —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π")
        await state.clear()
    
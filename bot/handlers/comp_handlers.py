from aiogram import F, Router
from aiogram.filters import CommandStart
from aiogram.types import Message, CallbackQuery
from aiogram.fsm.state import State, StatesGroup
from aiogram.fsm.context import FSMContext
from sqlalchemy.ext.asyncio import AsyncSession
from database.user import register_user, check_active_subscription, check_has_energy
from bot.keyboards.comp_keyboards import q1_markup, q2_markup, q3_markup, comp_prompt

import openai
from openai import AsyncOpenAI
from config import GPT_TOKEN

router = Router()

class CheckComp(StatesGroup):
    ask_names_dates = State()
    quest1 = State()
    quest2 = State()
    quest3 = State()
    

@router.message(F.text == "–ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å")
async def send_quest(msg: Message, state: FSMContext, session: AsyncSession) -> None:
    if await check_active_subscription(session, msg.from_user.id):
        await msg.answer(text="""–ü—Ä–∏–≤–µ—Ç! –•–æ—á–µ—à—å –ø–æ–Ω—è—Ç—å, –Ω–∞—Å–∫–æ–ª—å–∫–æ –≤—ã –ø–æ–¥—Ö–æ–¥–∏—Ç–µ –¥—Ä—É–≥ –¥—Ä—É–≥—É?‚Ä®‚Ä®
üíû –ü—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏ –∏–º–µ–Ω–∞ –∏ –¥–∞—Ç—ã —Ä–æ–∂–¥–µ–Ω–∏—è ‚Äî —è –ø—Ä–æ–≤–µ—Ä—é –≤–∞—à—É —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å –ø–æ –ú–∞—Ç—Ä–∏—Ü–µ –°—É–¥—å–±—ã.""")
        
        await state.set_state(CheckComp.ask_names_dates)
        
    else:
        await msg.answer(text="–ù–µ—Ç –ø–æ–¥–ø–∏—Å–∫–∏")
        

@router.message(CheckComp.ask_names_dates)
async def ask_quest(msg: Message, state: FSMContext):
    pair_info = msg.text
    await state.update_data(pair_info = pair_info)
    await msg.answer(text="–ö–∞–∫ –≤—ã —Å–µ–π—á–∞—Å –æ–±—â–∞–µ—Ç–µ—Å—å?",
                     reply_markup=q1_markup)
    await state.set_state(CheckComp.quest1)
    
    
@router.message(CheckComp.quest1)
async def ask_quest(msg: Message, state: FSMContext):
    ans1 = msg.text
    await state.update_data(ans1 = ans1)
    await msg.answer(text="–ß—Ç–æ —Ç–µ–±—è –±–æ–ª—å—à–µ –≤—Å–µ–≥–æ –∏–Ω—Ç–µ—Ä–µ—Å—É–µ—Ç?",
                     reply_markup=q2_markup)
    await state.set_state(CheckComp.quest2)
    

@router.message(CheckComp.quest2)
async def ask_quest(msg: Message, state: FSMContext):
    ans2 = msg.text
    await state.update_data(ans2 = ans2)
    await msg.answer(text="–ß—Ç–æ —Ç—ã —Å–µ–π—á–∞—Å —á—É–≤—Å—Ç–≤—É–µ—à—å –ø–æ –ø–æ–≤–æ–¥—É —ç—Ç–∏—Ö –æ—Ç–Ω–æ—à–µ–Ω–∏–π?",
                     reply_markup=q3_markup)
    await state.set_state(CheckComp.quest3)
    
    
@router.message(CheckComp.quest3)
async def ask_quest(msg: Message, state: FSMContext):
    ans3 = msg.text
    data = await state.get_data()
    ans1 = data.get('ans1')
    ans2 = data.get('ans2')
    pair_info = data.get('pair_info')
    
    try:
        client = AsyncOpenAI(api_key=GPT_TOKEN)
        response = await client.chat.completions.create(
            model="gpt-4.1-2025-04-14",
            messages=[
                {"role": "system", "content": comp_prompt},
                {"role": "user",   "content": (
                    f"–ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –ø–∞—Ä–µ: {pair_info}\n"
                    f"–û—Ç–≤–µ—Ç1: {ans1}\n"
                    f"–û—Ç–≤–µ—Ç2: {ans2}\n"
                    f"–û—Ç–≤–µ—Ç3: {ans3}"
                )}
            ],
            temperature=0.7,
            max_tokens=1000,
        )
        
        await msg.answer(response.choices[0].message.content.strip())
        await state.clear()
    
    except Exception as e:
        print(e)
        await msg.answer("–ö–∞–∂–µ—Ç—Å—è, –Ω–µ–ø–æ–ª–∞–¥–∫–∏ —Å –∫–æ—Å–º–æ—Å–æ–º, –ø–æ–¥–æ–∂–¥–µ–º, –∫–æ–≥–¥–∞ –ø—Ä–æ–π–¥–µ—Ç —Ä–µ—Ç—Ä–æ–≥—Ä–∞–¥–Ω—ã–π –ú–µ—Ä–∫—É—Ä–∏–π")
        await state.clear()
    